---
- name: Parchar y reiniciar servidores
  hosts: all
  become: true
  vars:
    yum_name: "*"
    yum_state: latest
    yum_enablerepo: "rhel-?-server-rpms,rhel-?-server-satellite-tools-6.?-rpms"
    yum_disablerepo: "*"
    yum_exclude: ""
    dnf_name: "*"
    dnf_state: latest
    dnf_enablerepo: "rhel-8-for-x86_64-appstream-rpms,rhel-8-for-x86_64-baseos-rpms,satellite-tools-6.?-for-rhel-8-x86_64-rpms"
    dnf_disablerepo: "*"
    dnf_exclude: ""

  tasks:
    - name: Actualizar paquetes vía yum
      yum:
        name: "{{ yum_name }}"
        state: "{{ yum_state }}"
        disablerepo: "{{ yum_disablerepo }}"
        enablerepo: "{{ yum_enablerepo }}"
        exclude: "{{ yum_exclude }}"
      register: yum_update
      when:
        - (ansible_facts['distribution_major_version'] == '6') or (ansible_facts['distribution_major_version'] == '7')

    - name: Mostrar errores de yum si ocurrieron
      debug:
        msg: "El comando yum produjo errores"
      when: yum_update is not defined

    - name: Actualizar paquetes vía dnf
      dnf:
        name: "{{ dnf_name }}"
        state: "{{ dnf_state }}"
        disablerepo: "{{ dnf_disablerepo }}"
        enablerepo: "{{ dnf_enablerepo }}"
        exclude: "{{ dnf_exclude }}"
      register: dnf_update
      when:
        - ansible_facts['distribution_major_version'] == '8'

    - name: Mostrar errores de dnf si ocurrieron
      debug:
        msg: "El comando dnf produjo errores"
      when: dnf_update is not defined

    - name: Verificar si es necesario un reinicio
      command: needs-restarting -r
      register: result
      ignore_errors: yes

    - name: Mostrar resultado de la verificación
      debug:
        var: result.rc

    - name: Reiniciar servidor si es necesario
      command: shutdown -r now "Actualización de Ansible completada"
      async: 30
      poll: 0
      when: result.rc == 1

    - name: Pausar para permitir que el servidor se apague
      pause:
        seconds: 30
      when: result.rc == 1

    - name: Esperar a que el reinicio se complete y que SSH esté disponible
      local_action: 
        module: wait_for 
        host: "{{ inventory_hostname }}" 
        port: 22 
        state: started 
        delay: 30 
        timeout: 600
      retries: 30
      delay: 10
      when: result.rc == 1
